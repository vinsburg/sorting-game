name: Build and Release

on:
  push:
    branches:
      - '**'
    tags:
      - '[0-9]{2}.[0-9]{2}.[0-9]{2,4}'
  pull_request:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run tests
        run: cargo test --verbose
        
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, i686-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin, aarch64-apple-darwin, aarch64-linux-android]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact: sorting-game-linux-x86-64.tar.gz
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            artifact: sorting-game-linux-x86-32.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact: sorting-game-linux-arm64.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact: sorting-game-windows-x86-64.zip
          - target: x86_64-apple-darwin
            os: macos-13
            artifact: sorting-game-macos-x86-64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-14
            artifact: sorting-game-macos-arm64.tar.gz
          - target: aarch64-linux-android
            os: ubuntu-latest
            artifact: sorting-game-android-arm64.tar.gz
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install linux aarch64 cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Install linux i686 cross-compilation tools
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib libc6-dev-i386
        
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Setup Android NDK
      if: matrix.target == 'aarch64-linux-android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b

    - name: Build binaries
      if: matrix.target != 'aarch64-linux-android' && matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'i686-unknown-linux-gnu'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Build Android NDK
      if: matrix.target == 'aarch64-linux-android'
      run: |
        cargo install cargo-ndk
        export ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME
        cargo ndk --target aarch64-linux-android -- build --release

    - name: Build aarch64-linux binaries
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        cargo build --release --target ${{ matrix.target }}

    - name: Build i686-linux binaries
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=gcc
        export CC_i686_unknown_linux_gnu=gcc
        export CXX_i686_unknown_linux_gnu=g++
        cargo build --release --target ${{ matrix.target }}

    - name: Create archive
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == windows-latest ]]; then
          7z a ${{ matrix.artifact }} sorting-game.exe
        else
          tar -czvf ${{ matrix.artifact }} sorting-game
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # This ensures all tags are fetched

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Move artifacts to root
      run: |
        mv artifacts/*/* ./
        rm -rf artifacts

    - name: Find artifacts
      run: find . -name "sorting-game-*"

    - name: Debug Information
      run: |
        echo "github.ref: ${{ github.ref }}"
        echo "github.ref_name: ${{ github.ref_name }}"
        echo "github.event_name: ${{ github.event_name }}"
        echo "github.sha: ${{ github.sha }}"
        git tag --points-at HEAD

    - name: Check for version tag
      id: check-tag
      run: |
        TAG=$(git tag --points-at HEAD | grep -E '^[0-9]{2}\.[0-9]{2}\.[0-9]{2,4}$' || true)
        if [ -n "$TAG" ]; then
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Tagged commit detected: $TAG"
        else
          echo "No matching tag found"
        fi

    - name: Create GitHub Release
      if: steps.check-tag.outputs.tag
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.check-tag.outputs.tag }}
        name: Release ${{ steps.check-tag.outputs.tag }}
        files: |
          sorting-game-linux-x86-32.tar.gz
          sorting-game-linux-x86-64.tar.gz
          sorting-game-linux-arm64.tar.gz
          sorting-game-windows-x86-64.zip
          sorting-game-macos-x86-64.tar.gz
          sorting-game-macos-arm64.tar.gz
          sorting-game-android-arm64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}